<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\event\Entity\Event;
use Drupal\registration\Entity\Registration;
use Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\RedirectResponse;

function registration_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if (($form_id === 'user_register_form')) {
        $form['account']['name']['#description'] = 'This name will be used when registering for events and to identify any photos or posts created by you on the site.';
        $form['actions']['submit']['#submit'][] = 'registration_user_register_form_submit';
    }

    if (($form_id === 'registration_add_form')) {
        foreach (array_keys($form['actions']) as $action) {
            if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
                $form['actions'][$action]['#submit'][] = 'registration_form_submit';
            }
        }
        $form['actions']['submit']['#value'] = 'Register';
    }

    if ($form_id === 'user_form') {
        $form['actions']['submit']['#submit'][] = 'registration_user_edit_form_submit';
    }
}

function registration_user_register_form_submit(array $form, FormStateInterface $form_state) {
    $message = 'A welcome message with further instructions has been sent to your email address. Once you verify your email, you\'ll be able to register for Events.';
    \Drupal::messenger()->deleteAll();
    \Drupal::messenger()->addStatus($message);
}

function registration_form_submit(array $form, FormStateInterface $form_state) {
    $eventId = $form_state->getValue('field_event');
    if ($eventId) {
        // Redirect to the event that they registered for page.
        $event = Event::load($eventId[0]['target_id']);
        $route = $event->toUrl()->getRouteName();
        $form_state->setRedirect($route, ['event' => $eventId[0]['target_id']]);

        // Better status message.
        $fields = $event->getFields();
        $event_name = $fields['label']->getValue()[0]['value'];
        $message = sprintf(
            "You have successfully registered for Event: %s",
            $event_name,
        );
        \Drupal::messenger()->deleteAll();
        \Drupal::messenger()->addStatus($message);
    }
}

function registration_user_edit_form_submit($form, &$form_state) {
    $form_state->setRedirect('entity.user.canonical', ['user' => \Drupal::currentUser()->id()]);
    $message = 'The changes to your profile have been saved.';
    \Drupal::messenger()->deleteAll();
    \Drupal::messenger()->addStatus($message);
}

/**
 * Prepares variables for registration templates.
 *
 * Default template: registration.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the registration information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_registration(array &$variables) {
    $variables['view_mode'] = $variables['elements']['#view_mode'];
    foreach (Element::children($variables['elements']) as $key) {
        $variables['content'][$key] = $variables['elements'][$key];
    }
}

function registration_preprocess_page__403(&$variables) {
    $redirectPath = \Drupal::urlGenerator()->getPathFromRoute('entity.registration.register');
    $response = new RedirectResponse(base_path() . $redirectPath);
    $response->send();
}

function registration_theme($existing, $type, $theme, $path) {

    return [
        'register_add_access_denied_hook' => [
            'render element' => 'children',
            'template' => 'register-add-access-denied-hook',
            'path' => $path . '/templates',
            'variables' => [
                'user_register_form' => 'Register Form',
                'login_form' => 'Login Form',
                'event_registration_form' => 'Event Registration Form',
                'user_id' => 'User ID',
            ],
        ],
    ];
}

function registration_registration_insert(Registration $registration)
{
    $uid = $registration->getFields()['uid']->getValue()[0]['target_id'];
    $user = User::load($uid);
    $mail = $user->getEmail();
    $username = $user->getDisplayName();

    $eid = $registration->getFields()['field_event']->getValue()[0]['target_id'];
    $event = Event::load($eid);
    $eventName = $event->label();
    $subject = "Registration information for $eventName";

    $params = [
        'event_name' => $eventName,
        'mail' => $mail,
        'username' => $username,
    ];

    $mailManager = \Drupal::service('plugin.manager.mail');
    $mailManager->mail('registration', $subject, $mail, 'en', $params);
}

function registration_mail($key, &$message, $params)
{
    $emailBody = <<<EOT
Congratulations %s, you have successfully registered for Big Day Boston 2023.

Please check https://bigdayboston.com for the latest information as the information in this email may change between when it was sent and the event.

Event Date: May 6th, 2023
Event Time:
* Checkin begins at 9:30am
* Competition begins at 10am
* Checklists submitted no later than 4pm
* Winner announced 4:30pm
Event Location: Birders must checkin at the beginning of the day and submit their checklist at the end of the day at Copp's Hill Terrace in the North End.
EOT;

    $message['subject'] = t('Registration information for ' . $params['event_name']);
    $message['body'][] = sprintf($emailBody, $params['username']);
}

/**
 * Implements hook_views_data_alter().
 */
function registration_views_data_alter(array &$data) {
  $data['users_field_data']['registration'] = [
    'title' => t("Users registrations"),
    'help' => t("Link the users to their registrations"),
    'relationship' => [
      'group' => t('Registrations'),
      'label' => t("User registrations"),
      'base' => 'registration', // database table
      'base field' => 'uid', //database field to join on
      'relationship field' => 'uid',
      'id' => 'standard',
    ],
  ];
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function registration_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
    if ($entity_type->id() === 'node' && $bundle === 'event_report') {
        if (isset($fields['field_registration'])) {
            // Use the ID as defined in the annotation of the constraint definition
            $fields['field_registration']->addConstraint('UniqueRegistration', []);
        }
    }
}
